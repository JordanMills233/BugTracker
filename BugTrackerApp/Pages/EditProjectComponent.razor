@page "/editproject/{ProjectId}"

@inject NavigationManager NavigationManager
@inject IAddProjectUseCase AddProjectUseCase
@inject IEditProjectUseCase EditProjectUseCase
@inject IGetProjectByIdUseCase GetProjectByIdUseCase

<h3>Edit Project</h3>

@if (project != null)
{
    <EditForm Model="project" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="project.ProjectName" class="form-control"></InputText>
        </div>
        <br />
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="project.ProjectDescription" class="form-control"></InputText>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>

}

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private Project project;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.ProjectId, out int IProjectId))
        {
            var proj = GetProjectByIdUseCase.Execute(IProjectId);
            this.project = new Project { ProjectId = proj.ProjectId, ProjectName = proj.ProjectName, ProjectDescription = proj.ProjectDescription };

        }

    }

    private void OnValidSubmit()
    {
        EditProjectUseCase.Execute(this.project);
        NavigationManager.NavigateTo("/projects");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/projects");
    }
}
